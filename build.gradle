plugins {
	id ("jacoco")
	id("java")
	id("org.springframework.boot") version "3.3.3"
	id("io.spring.dependency-management") version "1.1.6"
	id 'com.diffplug.spotless' version '6.25.0'
}

group = "com.mpsp"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all*.exclude group:'org.springframework.boot', module:'spring-boot-starter-logging'
}

repositories {
	mavenCentral()
}

ext {
    openapiVersion = '2.1.0'
    nimubs = '9.37.2'
	set('sdkVersion',"2.27.10")
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation "com.nimbusds:nimbus-jose-jwt:${nimubs}"
	// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-common
	implementation "org.springdoc:springdoc-openapi-starter-common:${openapiVersion}"
	// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openapiVersion}"


	implementation 'software.amazon.awssdk:sesv2'

	compileOnly("org.projectlombok:lombok")

	runtimeOnly("com.mysql:mysql-connector-j")
	annotationProcessor("org.projectlombok:lombok")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.security:spring-security-test")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")

}

dependencyManagement {
	imports {
//		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "software.amazon.awssdk:bom:${sdkVersion}"
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

spotless {
	java {
		googleJavaFormat('1.17.0') // Specify the google-java-format version
		removeUnusedImports()
		formatAnnotations()
	}
}