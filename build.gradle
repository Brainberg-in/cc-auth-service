plugins {
	id ("jacoco")
	id("java")
	id("org.springframework.boot") version "3.4.2"
	id("io.spring.dependency-management") version "1.1.7"
}

group = "com.mpsp"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all*.exclude group:'org.springframework.boot', module:'spring-boot-starter-logging'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
    openapiVersion = '2.8.4'
    nimubs = '10.0.1'
	newrelic='8.18.0'
}
dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Spring Cloud
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// nimbus-jose-jwt library
	implementation "com.nimbusds:nimbus-jose-jwt:${nimubs}"

	// Springdoc OpenAPI
	implementation "org.springdoc:springdoc-openapi-starter-common:${openapiVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openapiVersion}"

	// Lombok
	compileOnly("org.projectlombok:lombok")
	annotationProcessor("org.projectlombok:lombok")

	// MySQL Connector
	runtimeOnly("com.mysql:mysql-connector-j")
	// https://mvnrepository.com/artifact/com.newrelic.agent.java/newrelic-api
	implementation "com.newrelic.agent.java:newrelic-api:${newrelic}"


	// Testing dependencies
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.security:spring-security-test")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
	testImplementation 'com.openpojo:openpojo:0.9.1'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs += '-parameters'
}

test {
	jvmArgs '--add-opens', 'java.base/java.time=ALL-UNNAMED'
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}


jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
	
	reports {
        html.required.set(true)
        xml.required.set(true)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
				    "com/mpsp/cc_auth_service/CcAuthServiceApplication*",
					"com/mpsp/cc_auth_service/controllers/*",
                    "com/mpsp/cc_auth_service/dto/*",
                    "com/mpsp/cc_auth_service/repository/*",
					"com/mpsp/cc_auth_service/feignclients/*",
                    "com/mpsp/cc_auth_service/constants/*",
                    "com/mpsp/cc_auth_service/config/*"
            ])
        }))
    }
}

